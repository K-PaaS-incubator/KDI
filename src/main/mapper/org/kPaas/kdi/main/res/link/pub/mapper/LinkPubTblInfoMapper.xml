<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.kPaas.kdi.main.res.link.pub.mapper.LinkPubTblInfoMapper">

	<insert id="createTable">
		CREATE TABLE `KDI_LINK_PUB_TBL_INF` (
		`COL_NM` VARCHAR2(100) NOT NULL,
		`SVC_LNK_ID` VARCHAR2(100) NOT NULL REFERENCES KDI_LINK_PUB_INF(SVC_LNK_ID) ON DELETE CASCADE,
		`COL_TYPE`
		VARCHAR2(20) NULL, <!-- 컬럼타입: 
			컬럼 자료형 -->
		`COL_LNK_TYPE` CHAR(1) NULL, <!-- D:데이터컬럼, O:OP대체컬럼, S:STATUS대체컬럼 -->
		`COL_NM_MP` VARCHAR2(100) NULL, <!-- 컬럼명을 변경하여 송신할때 사용 -->
		`COL_LNK_YN` CHAR(1) NULL, <!-- 컬럼연계여부로 시스템컬럼을 첨부안하려면 해당 값을 N으로 저장 -->
		`COL_ORDER_NUM` NUMBER(2) NULL, <!-- 컬럼 ORDER BY 출력 순서 -->
		`COL_ORDER_TYPE` CHAR(1) NULL, <!-- 컬럼 ORDER BY 유형 (ASC, DESC) -->
		`REG_ID` VARCHAR2(20) NULL,
		`REG_DT` DATE NULL,
		`MOD_ID` VARCHAR2(20) NULL,
		`MOD_DT` DATE NULL,
		PRIMARY KEY (`COL_NM`,`SVC_LNK_ID`)
		)
	</insert>

	<sql id="getLinkPubTblInfListWhere">
		KDI_LINK_PUB_TBL_INF TB1
		<where>
			TB1.SVC_LNK_ID = #{param.value.svcLnkId}
		</where>
	</sql>

	<select id="getListCnt" resultType="Long">
		SELECT
		COUNT(TB1.*)
		FROM
		<include refid="getLinkPubTblInfListWhere" />
	</select>

	<select id="getList" resultType="Map">
		SELECT
		TB1.COL_NM AS COLUMN_NAME,
		TB1.SVC_LNK_ID,
		TB1.COL_TYPE AS DATA_TYPE,
		TB1.COL_LNK_TYPE,
		TB1.COL_NM_MP,
		TB1.COL_LNK_YN,
		TB1.COL_ORDER_NUM,
		TB1.COL_ORDER_TYPE
		FROM
		<include refid="getLinkPubTblInfListWhere" />
		LIMIT
		#{param.pagePerRow}
		OFFSET
		(#{param.pageNum} - 1) * #{param.pagePerRow}
	</select>

	<insert id="insertChild">
		INSERT INTO KDI_LINK_PUB_TBL_INF (
		COL_NM,
		SVC_LNK_ID,
		COL_TYPE,
		COL_LNK_TYPE,
		COL_NM_MP,
		COL_LNK_YN,
		COL_ORDER_NUM,
		COL_ORDER_TYPE,
		REG_ID,
		REG_DT
		)
		VALUES (
		#{param.colName},
		#{param.svcLnkId},
		#{param.colType},
		#{param.colLnkType},
		#{param.colNmMp},
		
		<if test="param.colLnkYn != null and param.colLnkYn != ''">
			#{param.colLnkYn},
		</if>
		<if test="param.colLnkYn == null or param.colLnkYn == ''">
			'N',
		</if>
		
		<if test="param.colOrderNum != null and param.colOrderNum != ''">
			#{param.colOrderNum},
		</if>
		<if test="param.colOrderNum == null or param.colOrderNum == ''">
			NULL,
		</if>
		
		<if test="param.colOrderType != null and param.colOrderType != ''">
			#{param.colOrderType},
		</if>
		<if test="param.colOrderType == null or param.colOrderType == ''">
			'N',
		</if>
		#{param.regId},
		current_timestamp()
		)
	</insert>

	<select id="duplicateCheck" resultType="Integer">
		SELECT count(*) FROM KDI_LINK_PUB_TBL_INF
		<where>
			COL_NM = #{param.value.colNm}
			AND SVC_LNK_ID = #{param.value.svcLnkId}
		</where>
	</select>

	<select id="get" resultType="Map">
		SELECT * FROM KDI_LINK_PUB_TBL_INF
		<where>
			COL_NM = #{param.value.colNm}
			AND SVC_LNK_ID = #{param.value.svcLnkId}
		</where>
	</select>

	<update id="modifyChild">
		MERGE INTO KDI_LINK_PUB_TBL_INF T1
		USING (
		SELECT
		CAST(#{param.colName} AS CHARACTER VARYING) COL_NM,
		CAST(#{param.svcLnkId} AS CHARACTER VARYING) SVC_LNK_ID,

		CAST(#{param.colType} AS CHARACTER VARYING) COL_TYPE,
		CAST(#{param.colLnkType} AS CHARACTER) COL_LNK_TYPE,
		CAST(#{param.colNmMp} AS CHARACTER VARYING) COL_NM_MP,
		CAST(
		<if test="param.colLnkYn != null and param.colLnkYn != ''">
			#{param.colLnkYn}
		</if>
		<if test="param.colLnkYn == null or param.colLnkYn == ''">
			'N'
		</if>
		AS CHARACTER) COL_LNK_YN,
		
		<if test="param.colOrderNum != null and param.colOrderNum != ''">
		CAST(#{param.colOrderNum}AS NUMBER) COL_ORDER_NUM,
		</if>
		<if test="param.colOrderNum == null or param.colOrderNum == ''">
		NULL COL_ORDER_NUM,
		</if>
		
		CAST(
		<if test="param.colOrderType != null and param.colOrderType != ''">
			#{param.colOrderType}
		</if>
		<if test="param.colOrderType == null or param.colOrderType == ''">
			'N'
		</if>
		AS CHARACTER) COL_ORDER_TYPE,	
		
		CAST(#{param.modifyId} AS CHARACTER VARYING) MOD_ID
		FROM DUAL
		) T2
		ON (T1.COL_NM = T2.COL_NM AND T1.SVC_LNK_ID = T2.SVC_LNK_ID)
		WHEN MATCHED THEN UPDATE
		<set>
			COL_TYPE = T2.COL_TYPE,
			COL_LNK_TYPE = T2.COL_LNK_TYPE,
			COL_NM_MP =T2.COL_NM_MP,
			COL_LNK_YN = T2.COL_LNK_YN,
			MOD_ID = T2.MOD_ID,
			COL_ORDER_NUM = T2.COL_ORDER_NUM,
			COL_ORDER_TYPE = T2.COL_ORDER_TYPE,
			MOD_DT = current_timestamp()
		</set>
		WHEN NOT MATCHED THEN INSERT (
		COL_NM,
		SVC_LNK_ID,

		COL_TYPE,
		COL_LNK_TYPE,
		COL_NM_MP,
		COL_LNK_YN,
		COL_ORDER_NUM,
		COL_ORDER_TYPE,

		REG_ID,
		REG_DT,
		MOD_ID,
		MOD_DT
		) VALUES (
		T2.COL_NM,
		T2.SVC_LNK_ID,

		T2.COL_TYPE,
		T2.COL_LNK_TYPE,
		T2.COL_NM_MP,
		T2.COL_LNK_YN,
		T2.COL_ORDER_NUM,
		T2.COL_ORDER_TYPE,

		T2.MOD_ID,
		current_timestamp(),
		T2.MOD_ID,
		current_timestamp()
		)
	</update>

	<delete id="delete" parameterType="String">
		DELETE
		FROM
		KDI_LINK_PUB_TBL_INF
		<where>
			COL_NM = #{param.value.colNm}
			AND SVC_LNK_ID = #{param.value.svcLnkId}
		</where>
	</delete>

	<select id="columnExists" resultType="boolean">
		SELECT
		COUNT(*)
		FROM
		ALL_TAB_COLS T1
		<where>
			T1.OWNER = #{schNm}
			AND T1.TABLE_NAME = #{tbNm}
			AND T1.COLUMN_NAME = #{colNm}
		</where>
	</select>

	<select id="getColumns" resultType="Map">
		SELECT
		T1.COLUMN_NAME,
		T1.DATA_TYPE,
		T2.COMMENTS
		FROM
		ALL_TAB_COLS T1,
		ALL_COL_COMMENTS T2
		<where>
			T1.OWNER = T2.OWNER
			AND T1.TABLE_NAME = T2.TABLE_NAME
			AND T1.COLUMN_NAME = T2.COLUMN_NAME
			AND T1.OWNER = #{param.value.schemaName}
			AND T1.TABLE_NAME = #{param.value.tableName}
		</where>
		ORDER BY T1.COLUMN_ID
	</select>

</mapper>